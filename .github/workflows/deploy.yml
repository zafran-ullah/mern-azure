name: Build and Deploy MERN to Azure

on:
  push:
    branches:
      - main

env:
  REGISTRY: mernacr123.azurecr.io
  CLIENT_IMAGE: mern-client
  SERVER_IMAGE: mern-server
  RESOURCE_GROUP: mern-group
  WEBAPP_NAME: mern-app-zafran

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Build and push client image
      run: |
        docker build -t $REGISTRY/$CLIENT_IMAGE:latest ./client
        docker push $REGISTRY/$CLIENT_IMAGE:latest

    - name: Build and push server image
      run: |
        docker build -t $REGISTRY/$SERVER_IMAGE:latest ./server
        docker push $REGISTRY/$SERVER_IMAGE:latest

    - name: Deploy to Azure Web App using Docker Compose
      run: |
        # Stop the app service to clear any stuck containers
        az webapp stop --name $WEBAPP_NAME --resource-group $RESOURCE_GROUP
        
        # Configure the multi-container app
        az webapp config container set \
          --name $WEBAPP_NAME \
          --resource-group $RESOURCE_GROUP \
          --multicontainer-config-type compose \
          --multicontainer-config-file docker-compose.prod.yml
        
        # Set environment variables
        az webapp config appsettings set \
          --name $WEBAPP_NAME \
          --resource-group $RESOURCE_GROUP \
          --settings \
          WEBSITES_PORT=80 \
          WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
          WEBSITES_CONTAINER_START_TIME_LIMIT=600 \
          DOCKER_ENABLE_CI=true \
          MONGODB_URI="${{ secrets.MONGODB_URI }}" \
          NODE_ENV=production \
          CORS_ORIGIN=https://mern-app-zafran.azurewebsites.net
        
        # Enable logging
        az webapp log config \
          --name $WEBAPP_NAME \
          --resource-group $RESOURCE_GROUP \
          --application-logging filesystem \
          --detailed-error-messages true \
          --failed-request-tracing true \
          --web-server-logging filesystem
        
        # Start the app service
        az webapp start --name $WEBAPP_NAME --resource-group $RESOURCE_GROUP
        
        # Wait for containers to start
        echo "Waiting for containers to start..."
        sleep 60
        
        # Check app status
        echo "Checking app status..."
        az webapp show --name $WEBAPP_NAME --resource-group $RESOURCE_GROUP --query "state" -o tsv
        
        # Show container logs
        echo "Container logs:"
        az webapp log tail --name $WEBAPP_NAME --resource-group $RESOURCE_GROUP --provider application &
        LOG_PID=$!
        sleep 30
        kill $LOG_PID || true
